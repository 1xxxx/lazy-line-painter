/* 
* Lazy Line Painter 1.4
* SVG Stroke animation.
*
* https://github.com/camoconnell/lazy-line-painter
* http://www.camoconnell.com
*
* Copyright 2013 Cam O'Connell
* Licensed under the MIT license.
*  
*/ 

(function(e,t,n){var g={init:function(c){return this.each(function(){var a=e(this),b=a.data("lazyLinePainter");a.addClass("lazy-line");if(!b){var b=e.extend({width:null,height:null,strokeWidth:2,strokeColor:"#000",strokeCap:"round",strokeJoin:"round",strokeOpacity:1,strokeDash:null,onComplete:null,delay:null,overrideKey:null},c),h=null===b.overrideKey?a.attr("id").replace("#",""):b.overrideKey,f=b.svgData[h].dimensions.width,k=b.svgData[h].dimensions.height;b.svgData=b.svgData[h].strokepath;null===
b.width&&(b.width=f);null===b.height&&(b.height=k);h=a.attr("id");f=new Raphael(h,f,k);a.data("lazyLinePainter",{svgData:b.svgData,width:b.width,height:b.height,strokeWidth:b.strokeWidth,strokeColor:b.strokeColor,strokeCap:b.strokeCap,strokeJoin:b.strokeJoin,strokeOpacity:b.strokeOpacity,strokeDash:b.strokeDash,onComplete:b.onComplete,delay:b.delay,overrideKey:b.overrideKey,paper:f,count:1,complete:!1,playhead:0,setTimeOutHandler:[]})}})},paint:function(){return this.each(function(){var c=e(this),
a=c.data("lazyLinePainter"),b=function(){c.css({width:a.width,height:a.height});e.each(a.svgData,function(b,f){var e=a.paper.path(f.path);e.attr({stroke:"none","stroke-width":a.strokeWidth,"fill-opacity":0});var g=setTimeout(function(){var b=a.paper,h=f.duration,g=l(a,f),m=function(){a.setTimeOutHandler.splice(a.count,1);a.count++;a.svgData.length==a.count&&(a.complete=!0,null!==a.onComplete&&a.onComplete.call(c))},j;j="string"==typeof e?b.path(e).attr({stroke:"none",fill:"none"}):e;var p=b.path(j.getSubpath(0,
1)).attr(g),q=j.getTotalLength(j);j.getPointAtLength(0);var r=(new Date).getTime(),s=setInterval(function(){var a=(new Date).getTime()-r,b=j.getSubpath(0,a/h*q);g.path=b;p.animate(g,25);a>=h&&(clearInterval(s),m!==n&&m(),j.remove())},25)},a.playhead);a.playhead+=f.duration;a.setTimeOutHandler.push(g)})};null===a.delay?b():setTimeout(b,a.delay)})},erase:function(){return this.each(function(){var c=e(this);c.find("svg").empty();d=c.data("lazyLinePainter");for(i=0;i<d.setTimeOutHandler.length;i++)clearTimeout(d.setTimeOutHandler[i]);
d.playhead=0;d.count=0;d.complete=!1})},destroy:function(){return this.each(function(){var c=e(this);c.data("lazyLinePainter");c.removeData("lazyLinePainter");c.remove()})},stamp:function(){return this.each(function(){var c=e(this),a=c.data("lazyLinePainter"),b=function(){c.css({width:a.width,height:a.height});for(i=0;i<a.svgData.length;i++)a.paper.path(a.svgData[i].path).attr(l(a,a.svgData[i]))};null===a.delay?b():setTimeout(b,a.delay)})}},l=function(c,a){return{stroke:!a.strokeColor?c.strokeColor:
a.strokeColor,"fill-opacity":0,"stroke-dasharray":!a.strokeDash?c.strokeDash:a.strokeDash,"stroke-opacity":!a.strokeOpacity?c.strokeOpacity:a.strokeOpacity,"stroke-width":!a.strokeWidth?c.strokeWidth:a.strokeWidth,"stroke-linecap":!a.strokeCap?c.strokeCap:a.strokeCap,"stroke-linejoin":!a.strokeJoin?c.strokeJoin:a.strokeJoin}};e.fn.lazylinepainter=function(c){if(g[c])return g[c].apply(this,Array.prototype.slice.call(arguments,1));if("object"===typeof c||!c)return g.init.apply(this,arguments)}})(jQuery,
window);